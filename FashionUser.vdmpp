class FashionUser

types
	public String = seq of char;
	
instance variables

	/*
   * DESCRIPTION: Username of the User
   */
	private username: String;
	
	/*
   * DESCRIPTION: Password of the User
   */
	private password: String;

	/*
   * DESCRIPTION: Name of the User
   */
	public name: String;
	
	/*
   * DESCRIPTION: Age of the User
   */
	public age: String;
	
	/*
   * DESCRIPTION: Favorite designers of the User
   */
	private  designers: seq of Designer := [];
	
	/*
   * DESCRIPTION: Number of favorite designers of the User
   */
	private  numberDesigners: int := 0;
	
	/*
   * DESCRIPTION: Favorite models of the User
   */
	private  models: seq of Model := [];
	
	/*
   * DESCRIPTION: Number of favorite models of the User
   */
	private  numberModels: int := 0;
	
	/*
   * DESCRIPTION: Events of the User
   */
	private events: seq of Event := [];
	
	/*
   * DESCRIPTION: Number of events of the User
   */
	private  numberEvents: int := 0;
	
	/*
   * DESCRIPTION: Returns in a string all informations about the User
   */ 
	private output : String := "";
	
	/*
   * DESCRIPTION: Invariant of class Designer 
   * All class members must have lenght bigger than zero
   * Password lenght must be equals to 6
   */
	inv len username > 0 and len password = 6 and len name > 0 and len age > 0;


operations  

	/*
   * DESCRIPTION: Constructor of FashionUser class
   */
  public FashionUser : String *
  										String *
  										String *
  										String  ==> FashionUser
  FashionUser(u, p, nm, ag) ==
  (
  	username := u;
  	password := p;
    name := nm;
    age := ag;
    return self;
  );
  
 	/*
   * DESCRIPTION: Returns the Userame of the FashionUser
   */ 
  public pure getUsername : () ==> String
	   getUsername() == return username
	   post RESULT = username;

 	/*
   * DESCRIPTION: Returns the password of the FashionUser
   */
  public pure getPassword : () ==> String
	   getPassword() == return password
 		 post RESULT = password;
  
  /*
   * DESCRIPTION: Returns the name of the FashionUser
   */
	 public pure getName : () ==> String
	   getName() == return name
	   post RESULT = name;
	   
	/*
   * DESCRIPTION: Returns the age of the FashionUser
   */
	 public pure getAge : () ==> String
		getAge() == return age
		post RESULT = age;   
  
	/*
   * DESCRIPTION: Insert one designer in the favorite designers of the User
   */
		public insertDesigner : Designer ==> ()
	  insertDesigner(d) ==
	  (
	    if d not in set elems designers 
	    then(
	     designers := designers ^ [d];
	     numberDesigners := numberDesigners + 1;)
	     else
	      IO`print("Impossivel adicionar designer ao utilizador");
	   )
	  pre d not in set elems designers
	  post d in set elems designers;
	  
	/*
   * DESCRIPTION: Returns the number of favorites designers of the User
   */	   
	  public pure getNumberFavDesigners : () ==> nat
	  getNumberFavDesigners() == return numberDesigners
	  post RESULT = numberDesigners;
	 
	/*
   * DESCRIPTION: Returns the favorites designers of the User
   */	   
	  public getDesigners: () ==> seq of Designer
	  getDesigners() == return designers
	  post RESULT = designers;

	/*
   * DESCRIPTION: Insert one model in the favorite models of the User
   */	  
	  public insertModel : Model ==> ()
	  insertModel(d) ==
	  (
	  	if d not in set elems models 
	    then(
	    numberModels := numberModels + 1;
	    models := models ^ [d];)
	    else
	    IO`print("Impossivel adicionar modelo ao utilizador");
	  )
	  pre d not in set elems models
	  post d in set elems models;
	  
	/*
   * DESCRIPTION: Returns the number of favorites models of the User
   */
	  public pure getNumberFavModels : () ==> nat
	  getNumberFavModels() == return numberModels
	  post RESULT = numberModels;

	/*
   * DESCRIPTION: Returns the favorites models of the User
   */	  
	  public getModels: () ==> seq of Model
	  getModels() == return models
	   post RESULT = models;
	  
	/*
   * DESCRIPTION: Insert one event in the events of the User
   */	    
		public insertEvent : Event ==> ()
	  insertEvent(ev) ==
	  (
	   if ev not in set elems events
	    then(
	    numberEvents := numberEvents + 1;
	    events := events ^ [ev];)
	    else 
	    IO`print("Impossivel adicionar evento ao utilizador");
	  )
	  pre ev not in set elems events
	  post ev in set elems events;
	  
	  
	/*
   * DESCRIPTION: Returns the number of events of the User
   */
	  public pure getNumberEvents : () ==> nat
	  getNumberEvents() == return numberEvents
		post RESULT = numberEvents;
		
	/*
   * DESCRIPTION: Returns events of the User
   */
 		public getEvents: () ==> seq of Event
	  getEvents() == return events
	  post RESULT = events;
	  
  /*
   * DESCRIPTION: Returns in a string all informations about the User
   */ 
	  public printUser: () ==> String
		printUser() == (
		output := "Username: "^username^"\n"
							^"Password: "^password^"\n"
							^"Name: "^name^"\n"
							^"Age: "^age^"\n";
		return output;
		)
 		post RESULT = output;
 		
end FashionUser
