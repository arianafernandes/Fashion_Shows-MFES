class TestApp

types
public String = seq of char;

operations

/*
 * DESCRIPTION: Execute tests
 */ 
public static printTests: () ==> ()
	printTests() == 
	(
    new Tests().run();   
   );
   
/*
 * DESCRIPTION: Return app users
 */    
 public static getUsers: () ==> set of FashionUser
	getUsers() ==
	(	
	return Tests`getAppUsers();
 );
 
 /*
 * DESCRIPTION: Return app festivals
 */     
  public static getFestivals: () ==> seq of FashionFestival
  getFestivals() ==
  (
  	return Tests`getFestivals();
  );
   
/*
 * DESCRIPTION: Return app festivals names in a list
 */    
  public static getFestivalsNames: () ==> String
	getFestivalsNames() ==
	(	
	for counter = 1 to len Tests`getFestivals() do (
			IO`print(counter);
  		return (Tests`getFestivals() (counter)).printFashionFestivalName();
   );
  );  	
  
/*
 * DESCRIPTION: Return festival by festival ID
 */    
  public static getFestival: (int) ==> FashionFestival
		getFestival(optionFestival) ==
		(	
		return (Tests`getFestivals() (optionFestival));
	 );
	 
	/*
	 * DESCRIPTION: Return events of selected festival
	 */    
 	 public static getFestivalEvents: (int) ==> seq of Event
		getFestivalEvents(optionFestival) ==
		(	
		return (Tests`getFestivals() (optionFestival)).getEvents();
	 );
	 
	 /*
	 * DESCRIPTION: Return festivals users
	 */  
	 public static getFestivalUsers: (int) ==> set of FashionUser
		getFestivalUsers(optionFestival) ==
		(	
		return (Tests`getFestivals() (optionFestival)).getFashionUsers();
	 );
	 
	/*
	 * DESCRIPTION: Return events names of selected festival in a list
	 */  	 	 
	 public static getFestivalEventsNames: (int) ==> String
		getFestivalEventsNames(optionFestival) ==
		(	
		 	for counter = 1 to len (Tests`getFestivals() (optionFestival)).getEvents() do (
  		IO`print(counter);
  		return (((Tests`getFestivals() (optionFestival)).getEvents() (counter)).getName());
	 		);
	 );

	/*
	 * DESCRIPTION: Return selected event of selected festival
	 */ 
	public static getEvent: (int) * (int) ==> Event
		getEvent(optionFestival,optionEvent) ==
		(	
		return (getFestivalEvents(optionFestival) (optionEvent));
	 );
	 
	/*
	 * DESCRIPTION: Return all runways of selected event  of selected festival
	 */ 
  public static getRunwaysByEvent : (int) * (int) ==> seq of Runway
	getRunwaysByEvent(optionFestival, optionEvent) ==
	(
		return ((getFestivalEvents(optionFestival) (optionEvent)).getRunways());
	);

	/*
	 * DESCRIPTION: Return all runways names of selected event  of selected festival
	 */ 	
	public static getRunwaysNames: (int) * (int) ==> String
		getRunwaysNames(optionFestival,optionEvent) ==
		(	
  		for counter = 1 to len getRunwaysByEvent(optionFestival,optionEvent) do (
  		IO`print(counter);
  		return ((getRunwaysByEvent(optionFestival,optionEvent) (counter)).getName());
	 		);
	 );
	
	/*
	 * DESCRIPTION: Return selected runway of selected event of selected festival
	 */  
  public static getOneRunwayByEvent : (int) * (int) * (int) ==> Runway
	getOneRunwayByEvent(optionFestival, optionEvent, optionRunWay) ==
	(
		return (getRunwaysByEvent(optionFestival,optionEvent)) (optionRunWay);
	);
	
	/*
	 * DESCRIPTION: Return models of selected runway of selected event of selected festival
	 */
	 	public static getModelsByRunway : (int) * (int) * (int) ==> seq of Model
	getModelsByRunway(optionFestival, optionEvent, optionRunWay) ==
	(
	return getOneRunwayByEvent(optionFestival,optionEvent,optionRunWay).getModels();
	);
    
  	
	/*
	 * DESCRIPTION: Return designers of selected runway of selected event of selected festival
	 */
  public static getDesignersByRunway : (int) * (int) * (int) ==> set of Designer
	getDesignersByRunway(optionFestival, optionEvent, optionRunWay) ==
	(
	return getOneRunwayByEvent(optionFestival,optionEvent,optionRunWay).getDesigners();
	);
  
	/*
	 * DESCRIPTION: Main funcion
	 */
public static main : () ==> ()
  main() ==
  (
  	IO`print("Executing all tests...\n");
  	printTests();
  );

end TestApp