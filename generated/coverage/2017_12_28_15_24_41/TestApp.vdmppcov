class TestApp

instance variables
private  static festivals: seq of FashionFestival := [];
private  static events: seq of Event := [];
private  static designers: seq of Designer := [];
private  static models: seq of Model := [];
private  static users: seq of FashionUser := [];

operations

public static printTests: () ==> ()
	printTests() == 
	(
		IO`print("\nExecuting Tests.vdmpp operations...\n");
    new Tests().run();   
   );
   
 public static printFestivals: () ==> ()
	printFestivals() ==
	(	
	IO`print("\nPrint Festivals");
	for counter = 1 to len Tests`getFestivals() do (
  		IO`print("\n");
  		IO`print("Festival Name: ");
  		IO`print((Tests`getFestivals() (counter)).getName());
  		IO`print("\n");
	  	IO`print("Date Begin: ");
	  	IO`print((Tests`getFestivals() (counter)).getDateBegin());
	  	IO`print("\n");
	  	IO`print("Date End: ");
	  	IO`print((Tests`getFestivals() (counter)).getDateEnd());
	  	IO`print("\n");
	  	IO`print("Local: ");
	  	IO`print((Tests`getFestivals() (counter)).getLocal());
	  	IO`print("\n");
	  	IO`print("\n");
   );
  );  	
  
  public static printFestivalsName: () ==> ()
	printFestivalsName() ==
	(	
	IO`print("\nPrint Festivals");
	for counter = 1 to len Tests`getFestivals() do (
  		IO`print("\n");
  		IO`print(counter);
  		IO`print((Tests`getFestivals() (counter)).getName());
	  	IO`print("\n");
	  	IO`print("\n");
   );
  );  	
  
  	
	public static getFestivalInf : (int) ==> ()
  getFestivalInf(num) == (
      IO`print("\n");
  		IO`print("Festival Name: ");
  		IO`print((Tests`getFestivals() (num)).getName());
  		IO`print("\n");
	  	IO`print("Date Begin: ");
	  	IO`print((Tests`getFestivals() (num)).getDateBegin());
	  	IO`print("\n");
	  	IO`print("Date End: ");
	  	IO`print((Tests`getFestivals() (num)).getDateEnd());
	  	IO`print("\n");
	  	IO`print("Local: ");
	  	IO`print((Tests`getFestivals() (num)).getLocal());
	  	IO`print("\n");
	  	IO`print("\n");
  );
  
public static printEvents: () ==> ()
	printEvents() ==
	(	
	IO`print("Events List: \n");
	for counter = 1 to len Tests`getEvents() do (
  	IO`print("Event ");
  	IO`print((Tests`getEvents() (counter)).getName());
  	IO`print("\n");
  	IO`print("Date: ");
  	IO`print((Tests`getEvents() (counter)).getDate());
  	IO`print("\n");
  	IO`print("Local: ");
  	IO`print((Tests`getEvents() (counter)).getLocal());
  	IO`print("\n");
  	IO`print("Time: ");
  	IO`print((Tests`getEvents() (counter)).getTime());
  	IO`print("\n");
  	IO`print("Duration: ");
    IO`print((Tests`getEvents() (counter)).getDuration());
  	IO`print("\n");
  	IO`print("Theme: ");
  	IO`print((Tests`getEvents() (counter)).getTheme());
  	IO`print("\n");
  	IO`print("Gender: ");
  	IO`print((Tests`getEvents() (counter)).getGender());
  	IO`print("\n");
  	IO`print("Collection: ");
  	IO`print((Tests`getEvents() (counter)).getCollection());
  	IO`print("\n");
  	IO`print("\n");
   );
  );
	 public static printEventsName: () ==> ()
		printEventsName() ==
		(	
		IO`print("\nPrint Events");
			for counter = 1 to len Tests`getEvents() do (
			IO`print("\n");
			IO`print(counter);
			IO`print((Tests`getEvents() (counter)).getName());
			IO`print("\n");
			IO`print("\n");
	 );
	);  
	
	public static getEventsByFestival : (int) ==> ()
  getEventsByFestival(num) == (
      IO`print("\n");
  		for counter = 1 to len (Tests`getFestivals() (num)).getEvents() do (
  		IO`print(counter);
  		IO`print(": ");
  		IO`print(((Tests`getFestivals() (num)).getEvents() (counter)).getName());
  		IO`print("\n");
  );
  );
  
public static printDesigners: () ==> ()
	printDesigners() ==
	(	
		IO`print("Designers List:");
	for counter = 1 to len Tests`getDesigners() do (
  		IO`print("\n");
  		IO`print("Designer Name: ");
			IO`print((Tests`getDesigners() (counter)).getName());
			IO`print("\n");
			IO`print("Age: ");
			IO`print((Tests`getDesigners() (counter)).getAge());
			IO`print("\n");
			IO`print("Nationality: ");
			IO`print((Tests`getDesigners() (counter)).getNationality());
			IO`print("\n");
			IO`print("Address: ");
		  IO`print((Tests`getDesigners() (counter)).getAddress());
			IO`print("\n");
			IO`print("Style: ");
			IO`print((Tests`getDesigners() (counter)).getStyle());
			IO`print("\n");
   );
  );
	
public static printModels: () ==> ()
	printModels() ==
	(	
		IO`print("Models List:\n");
	for counter = 1 to len Tests`getModels() do (
  		IO`print("\n");
  		IO`print("Designer Name: ");
			IO`print((Tests`getModels() (counter)).getName());
			IO`print("\n");
			IO`print("Age: ");
			IO`print((Tests`getModels() (counter)).getAge());
			IO`print("\n");
			IO`print("Nationality: ");
			IO`print((Tests`getModels() (counter)).getNationality());
			IO`print("\n");
			IO`print("Address: ");
		  IO`print((Tests`getModels() (counter)).getAddress());
			IO`print("\n");
   );
  );
public static printUsers: () ==> ()
	printUsers() ==
	(	
		IO`print("Users List\n");
	for counter = 1 to len Tests`getUsers() do (
  		IO`print("\n");
  		IO`print("User Name: ");
			IO`print((Tests`getUsers() (counter)).getName());
			IO`print("\n");
			IO`print("Age: ");
			IO`print((Tests`getUsers() (counter)).getAge());
   );
  );
  

public static main : () ==> ()
  main() ==
  (
  	printTests();
  	printFestivals();
  	printEvents();
  	printModels();
  	printDesigners();
  	printUsers();
  
  );

end TestApp