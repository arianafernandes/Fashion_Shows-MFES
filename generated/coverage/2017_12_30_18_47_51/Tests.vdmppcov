class Tests is subclass of MyTests

types
public String = seq of char;

instance variables
	private static festivals: seq of FashionFestival := [];
	private static events: seq of Event := [];
	private static designers: seq of Designer := [];
	private static models: seq of Model := [];
	private static appUsers: set of FashionUser := {};
  private static runways: seq of Runway := [];
	
	
operations

  public run : () ==> ()
  run() ==
  (
    
    -- VARIABLE DECLARATIONS
  	dcl f0: FashionFestival := new FashionFestival(" Porto Fashion Week", "04/05/2018", "10/05/2018", "Porto");
  	dcl f1: FashionFestival := new FashionFestival(" Madrid Fashion Week", "26/08/2018", "30/08/2018", "Madrid");
  	dcl ev0: Event := new Event(" Meet Portugal Fashion Designers", "04/05/2018", "Baixa", "12:00", "3h","Portugal", "Unisexo", "Primavera_Verao");		
 	  dcl ev1: Event := new Event(" Fashion Night Out Porto", "10/06/2018","Baixa","20:00","2h","GeometricForms","Unisexo","Primavera_Verao");
	  dcl ev2: Event := new Event(" Madrid Black Fashion","12/06/2018","Madrid","19:00","4h","Fashion Sales","Unisexo","Outono_Inverno");									
    dcl d0: Designer:= new Designer("Yves S. L.", "72", "Frances", "Paris", "Classico");
    dcl d1: Designer:= new Designer("Ralph Lauren", "69", "Frances", "Paris", "Classico");
    dcl m0: Model:= new Model("Sara Sampaio", "24", "Portuguesa", "New York");												 
    dcl m1: Model:= new Model("Claudia Schiffer","47","Alema","Alemanha");
 		dcl m2: Model:= new Model("Naomi Campbell","47","Inglesa","Inglaterra");
 		dcl m3: Model:= new Model("Kate Moss","43","Inglesa","Inglaterra");
 		dcl u0: FashionUser:= new FashionUser("Joao","123456","Joao", "30");
 		dcl u1: FashionUser:= new FashionUser("Maria","654321","Maria", "34");
 		dcl r0: Runway := new Runway(" Meet winter collecion");
 		dcl r1: Runway := new Runway(" African Power");
 		dcl r2: Runway := new Runway(" Nautical Vibes");
		--festivals
 		f0.insertEvent(ev0);
    f0.insertEvent(ev2);
    f1.insertEvent(ev0);
    f1.insertEvent(ev1);
    f0.insertFashionUser(u0);
    f0.insertFashionUser(u1);
		--events
		ev0.insertRunway(r0);
 		ev1.insertRunway(r1);
 		ev1.insertRunway(r2);
 		ev2.insertRunway(r2);
		--runways
 		r0.insertDesigner(d0);
 		r0.insertDesigner(d1);
 		r0.insertModel(m0);
 		r1.insertDesigner(d1);
 		r1.insertModel(m1);
 		r1.insertModel(m2);
 		r1.insertModel(m3);
 		r2.insertDesigner(d0);
 		r2.insertModel(m2);
 		--USERS
 		u0.insertEvent(ev0);
	  u0.insertEvent(ev1);
 		u0.insertDesigner(d0);
    u0.insertDesigner(d1);
    u0.insertModel(m0);
	  u0.insertModel(m1); 
    u1.insertEvent(ev2);
	  u1.insertEvent(ev0);
    u1.insertDesigner(d1);
	  u1.insertModel(m3); 
     
 		festivals := festivals ^ [f0];
 		festivals := festivals ^ [f1];
 		events := events ^ [ev0];
 		events := events ^ [ev1];
 		events := events ^ [ev2];
 		designers := designers ^ [d0];
 		designers := designers ^ [d1];
 		models := models ^ [m0];
 		models := models ^ [m1];
 		models := models ^ [m2];
 		models := models ^ [m3];
 		appUsers := appUsers union {u0};
 		appUsers := appUsers union {u1};
 		runways := runways ^ [r0];
 		runways := runways ^ [r1];
 		runways := runways ^ [r2];
 		
 		IO`print("(1/8) Test Creation of Elements\n");
    assertNotNull(f0);
    assertNotNull(f1);
    assertNotNull(ev0);
    assertNotNull(ev1);
    assertNotNull(ev2);
    assertNotNull(d0);
    assertNotNull(d1);
    assertNotNull(m0);
    assertNotNull(m1);
    assertNotNull(m2);
    assertNotNull(m3);
    assertNotNull(u0);
    assertNotNull(u1);
    IO`print("(1/8) Test Creation of Elements passed\n");
    
    -- EXECUTE FASHION FESTIVAL
    IO`print("(2/8) Test Fashion Festival\n");
    assertEqual(" Porto Fashion Week", f0.getName());
    assertEqual("04/05/2018", f0.getDateBegin());
    assertEqual("10/05/2018", f0.getDateEnd());
    assertEqual("Porto", f0.getLocal());
		assertEqual(2,f0.getNumberEvents());
		assertEqual(ev0.getName(),((f0.getEvents() (2)).getName()));
		assertEqual(2,f1.getNumberEvents());
		assertEqual(ev1.getName(),((f1.getEvents() (1)).getName()));
    assertEqual(ev1.getName(),((f1.getEvents() (1)).getName()));
    assertEqual(2, card f0.getFashionUsers());
    assertEqual(2,f0.getNumberFashionUsers());
    assertEqual(("Name: "^f0.getName()^"\n"^"Date Begin: "^f0.getDateBegin()^"\n"^"Date End: "^f0.getDateEnd()^"\n"
    						^"Local: "^f0.getLocal()^"\n"),f0.printFashionFestival());
    assertEqual(f0.getName()^"\n",f0.printFashionFestivalName());
    IO`print("(2/8) Test Fashion Festival passed\n");
    
    -- EXECUTE EVENT
    IO`print("(3/8) Test Fashion Event\n");
    assertEqual(" Meet Portugal Fashion Designers", ev0.getName());
    assertEqual("04/05/2018", ev0.getDate());
    assertEqual("Baixa", ev0.getLocal());
    assertEqual("12:00", ev0.getTime());
    assertEqual("3h", ev0.getDuration());
    assertEqual("Portugal", ev0.getTheme());
    assertEqual("Unisexo", ev0.getGender());
    assertEqual("Primavera_Verao", ev0.getCollection());  
 		assertEqual(1,ev0.getNumberRunways());
 		assertEqual(2,ev1.getNumberRunways());
 		assertEqual(1,ev2.getNumberRunways());
 		assertEqual(r0.getName(),(ev0.getRunways() (1)).getName());
 		assertEqual(("Event Name: "^ev0.getName()^"\n"^"Date: "^ev0.getDate()^"\n"^"Time: "^ev0.getTime()^"\n"^"Theme: "^ev0.getTheme()^"\n"
 								^"Gender: "^ev0.getGender()^"\n"^"Collection: "^ev0.getCollection()^"\n")	,ev0.printEvent());
   IO`print("(3/8) Test Fashion Event passed\n");
  
    -- EXECUTE Runway
   IO`print("(4/8) Test Fashion Runway\n");
   assertEqual(r0.getDesignersNumber(),card r0.getDesigners());
	 assertEqual(1,r0.getNumberModels());
	 assertEqual(m0.getName(),(r0.getModels() (1)).getName());
   assertEqual((r0.getName()^"\n"),r0.printRunway());
   IO`print("(4/8) Test Fashion Runway passed\n");
   
    -- EXECUTE DESIGNER
    IO`print("(5/8) Test Fashion Designer\n");
    assertEqual("Yves S. L.", d0.getName());
    assertEqual("72", d0.getAge());    
    assertEqual("Frances", d0.getNationality()); 
    assertEqual("Paris", d0.getAddress()); 
    assertEqual("Classico", d0.getStyle()); 
    assertEqual(("Designer Name: "^d0.getName()^"\n"
							^"Age: "^d0.getAge()^"\n"
							^"Nationality: "^d0.getNationality()^"\n"
							^"Address: "^d0.getAddress()^"\n"
							^"Style: "^d0.getStyle()^"\n")
     						,d0.printDesigner());
    IO`print("(5/8) Test Fashion Designer passed\n");
     						
    -- EXECUTE MODEL
    IO`print("(6/8) Test Fashion Model\n");
    assertEqual("Sara Sampaio", m0.getName());
    assertEqual("24", m0.getAge());    
    assertEqual("Portuguesa", m0.getNationality()); 
    assertEqual("New York", m0.getAddress()); 
     assertEqual(("Model Name: "^m0.getName()^"\n"
							^"Age: "^m0.getAge()^"\n"
							^"Nationality: "^m0.getNationality()^"\n"
							^"Address: "^m0.getAddress()^"\n")
     						,m0.printModel());
    IO`print("(6/8) Test Fashion Model passed\n");
    
    -- FASHION USER
    IO`print("(7/8) Test Fashion User\n");
    assertEqual("Joao", u0.getName());
    assertEqual("30", u0.getAge());    
    assertEqual("Joao", u0.getUsername());
    assertEqual("123456", u0.getPassword());   
    assertEqual(("Username: "^u0.getUsername()^"\n"
							^"Password: "^u0.getPassword()^"\n"
							^"Name: "^u0.getName()^"\n"
							^"Age: "^u0.getAge()^"\n")
     						,u0.printUser());
	   assertEqual(2,u0.getNumberEvents());
	   assertEqual(ev0.getName(), (u0.getEvents() (1)).getName());    
	   assertEqual(ev1.getName(), (u0.getEvents() (2)).getName()); 
     assertEqual(2,u0.getNumberFavDesigners());
     assertEqual(d0.getName(), (u0.getDesigners() (1)).getName());    
     assertEqual(d1.getName(), (u0.getDesigners() (2)).getName());    
     assertEqual(2,u0.getNumberFavModels());
     assertEqual(m0.getName(), (u0.getModels() (1)).getName());    
     assertEqual(m1.getName(), (u0.getModels() (2)).getName());    
     IO`print("(7/8) Test Fashion User passed\n");
     
     --TestApp
     	IO`print("(8/8) Test Fashion App\n");
      assertEqual(2, card TestApp`getUsers());
      assertEqual(2, len TestApp`getFestivals());
      assertEqual(" Porto Fashion Week\n",TestApp`getFestivalsNames());
      assertEqual(f0.getName(), TestApp`getFestival(1).getName());
  	  assertEqual(2, len TestApp`getFestivalEvents(1));
  	 	assertEqual(" Madrid Black Fashion",TestApp`getFestivalEventsNames(1));
  	  assertEqual(2, card TestApp`getFestivalUsers(1));
  	  assertEqual(ev2.getName(),TestApp`getEvent(1,1).getName());
  		assertEqual(1,len TestApp`getRunwaysByEvent(1,1));
  		assertEqual(" Nautical Vibes",TestApp`getRunwaysNames(1,1));
  		assertEqual(r2.getName(),TestApp`getOneRunwayByEvent(1,1,1).getName());
  		assertEqual(m2.getName(),(TestApp`getModelsByRunway(1,1,1) (1)).getName());
  		assertEqual(1, card TestApp`getDesignersByRunway(1,1,1));
  		assertEqual(2, len getFestivals());
  		assertEqual(3, len getEvents());
  		assertEqual(2, len getDesigners());
  		assertEqual(4, len getModels());
  		assertEqual(3, len getRunways());
  		assertEqual(2, card getAppUsers());
  		setAppUser("ariana","123456","ariana","21");
  		assertEqual(3, card getAppUsers());
  		IO`print("\n(8/8) Test Fashion App passed\n");
  		
  		IO`print((getEvents() (1)).getName());
  		IO`print((getEvents() (2)).getName());
  		IO`print((getEvents() (3)).getName());
  		IO`print("\nAll tests passed (8/8)\n");
  );
  
  public  static getFestivals : () ==> seq of FashionFestival
  getFestivals() == return festivals
  post RESULT = festivals;
  
  public  static getEvents : () ==> seq of Event
  getEvents() == return events
  post RESULT = events;
  
  public  static getDesigners : () ==> seq of Designer
  getDesigners() == return designers
  post RESULT = designers;
   
	public  static getModels : () ==> seq of Model
  getModels() == return models
  post RESULT = models;
    
  public  static getAppUsers : () ==> set of FashionUser
  getAppUsers() == return appUsers
  post RESULT = appUsers;
    
  public  static getRunways : () ==> seq of Runway
  getRunways() == return runways
  post RESULT = runways;
    
  public static setAppUser: (String) *  (String) * (String) * (String) ==> ()
  setAppUser(username,password,name,age) == 
  (
  	dcl u5 : FashionUser:= new FashionUser(username,password,name,age);
  	appUsers := appUsers union {u5};
   );
   
	
	
end Tests