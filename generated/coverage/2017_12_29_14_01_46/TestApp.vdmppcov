class TestApp

types
public String = seq of char;

instance variables
private  static festivals: seq of FashionFestival := [];
private  static events: seq of Event := [];
private  static designers: seq of Designer := [];
private  static models: seq of Model := [];
private  static users: seq of FashionUser := [];
private static eventsTemp: seq of Event := [];
private static modelsTemp: seq of Model := [];
private static designersTemp: seq of Designer := [];
private static festivalTemp: FashionFestival := new FashionFestival();
private static runwaysTemp: seq of Runway := [];
operations

public static printTests: () ==> ()
	printTests() == 
	(
		IO`print("Executing Tests.vdmpp operations...");
    new Tests().run();   
   );
   
  --Nomes dos festivais disponiveis
  public static getFestivalsNames: () ==> ()
	getFestivalsNames() ==
	(	
	for counter = 1 to len Tests`getFestivals() do (
  		IO`print("\n");
  		IO`print(counter);
  		IO`print((Tests`getFestivals() (counter)).getName());
	  	IO`print("\n");
	  	IO`print("\n");
   );
  );  	
  
  --Festival seleccionado apos isto imprimirs
  public static getFestival: (int) ==> FashionFestival
		getFestival(optionFestival) ==
		(	
		return (Tests`getFestivals() (optionFestival));
	 );
	 
	 --eventos do festival selecionado
	 public static getFestivalEvents: (int) ==> seq of Event
		getFestivalEvents(optionFestival) ==
		(	
		return (Tests`getFestivals() (optionFestival)).getEvents();
	 );
	 
	 --nomes dos eventos do festival selecionado
	 public static getFestivalEventsNames: (int) ==> ()
		getFestivalEventsNames(optionFestival) ==
		(	
		 	IO`print("\"n\"");
  		for counter = 1 to len (Tests`getFestivals() (optionFestival)).getEvents() do (
  		IO`print(counter);
  		IO`print(": ");
  		IO`print(((Tests`getFestivals() (optionFestival)).getEvents() (counter)).getName());
  		IO`print("\n");
	 		);
	 );

	--Evento selecionado do festival selecionado
	public static getEvent: (int) * (int) ==> Event
		getEvent(optionFestival,optionEvent) ==
		(	
		return (getFestivalEvents(optionFestival) (optionEvent));
	 );
	 
	--Retorna desfiles do evento selecionado do festival selecionado
  public static getRunwaysByEvent : (int) * (int) ==> seq of Runway
	getRunwaysByEvent(optionFestival, optionEvent) ==
	(
		return ((getFestivalEvents(optionFestival) (optionEvent)).getRunways());
	);
	
	public static getRunwaysNames: (int) * (int) ==> ()
		getRunwaysNames(optionFestival,optionEvent) ==
		(	
		 	IO`print("\n");
  		for counter = 0 to len getRunwaysByEvent(optionFestival,optionEvent) do (
  		IO`print(counter);
  		IO`print(": ");
  		IO`print((getRunwaysByEvent(optionFestival,optionEvent) (counter)).getName());
  		IO`print("\n");
	 		);
	 );
	 
	--Retorna desfile seleciondo do evento selecionado do festival selecionado
  public static getOneRunwayByEvent : (int) * (int) * (int) ==> Runway
	getOneRunwayByEvent(optionFestival, optionEvent, optionRunWay) ==
	(
		return (getRunwaysByEvent(optionFestival,optionEvent)) (optionRunWay);
	);
	
	--Retorna modelos do desfile seleciondo do evento selecionado do festival selecionado
	public static getModelsByRunway : (int) * (int) * (int) ==> seq of Model
	getModelsByRunway(optionFestival, optionEvent, optionRunWay) ==
	(
	return getOneRunwayByEvent(optionFestival,optionEvent,optionRunWay).getModels();
	);
    
  public static getModelsInfsByRunway : (int) * (int) * (int) ==> ()
	getModelsInfsByRunway(optionFestival, optionEvent, optionRunWay) ==
	(
			for counter = 1 to len getModelsByRunway(optionFestival, optionEvent, optionRunWay) do (
				getModelsByRunway(optionFestival, optionEvent, optionRunWay) (counter).printModel();
			);
	);
	
  --Retorna designers do desfile seleciondo do evento selecionado do festival selecionado  
  public static getDesignersByRunway : (int) * (int) * (int) ==> set of Designer
	getDesignersByRunway(optionFestival, optionEvent, optionRunWay) ==
	(
	return getOneRunwayByEvent(optionFestival,optionEvent,optionRunWay).getDesigners();
	);
	
  
  

public static main : () ==> ()
  main() ==
  (
  	printTests();
  );

end TestApp