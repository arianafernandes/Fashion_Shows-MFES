class TestApp

instance variables
private  static events: seq of Event := [];
private  static designers: seq of Designer := [];
private  static models: seq of Model := [];
private  static users: seq of FashionUser := [];

operations

public static setEvents: () ==> () 
	setEvents() ==
	(
	events := Tests`getEvents();
	);
	
public static setDesigners: () ==> () 
	setDesigners() ==
	(
	designers := Tests`getDesigners();
	);
	
public static setModels: () ==> () 
	setModels() ==
	(
	models := Tests`getModels();
	);
	
public static setUsers: () ==> () 
	setUsers() ==
	(
	users := Tests`getUsers();
	);

public static setApp: () ==> ()
	setApp() ==
	(
	setModels();
	setUsers();
	setDesigners();
	setEvents();
	IO`print("Set App done!\n");
	);
	
public static printTests: () ==> ()
	printTests() == 
	(
		IO`print("\nExecuting Tests.vdmpp operations...\n");
    new Tests().run();   
   );
   
public static printEvents: () ==> ()
	printEvents() ==
	(	
	IO`print("Print Events");
	for counter = 1 to len Tests`getEvents() do (
  		IO`print("\n");
  		IO`print("Event Name: ");
			IO`print((Tests`getEvents() (counter)).getName());
			IO`print("\n");
			IO`print("Local: ");
			IO`print((Tests`getEvents() (counter)).getLocal());
   );
  );

public static printDesigners: () ==> ()
	printDesigners() ==
	(	
		IO`print("Print Designers");
	for counter = 1 to len designers do (
  		IO`print("\n");
  		IO`print("Designer Name: ");
			IO`print((designers (counter)).getName());
			IO`print("\n");
			IO`print("Age: ");
			IO`print((designers (counter)).getAge());
   );
  );
	
public static printModels: () ==> ()
	printModels() ==
	(	
		IO`print("Print Models");
	for counter = 1 to len models do (
  		IO`print("\n");
  		IO`print("Model Name: ");
			IO`print((models (counter)).getName());
			IO`print("\n");
			IO`print("Age: ");
			IO`print((models (counter)).getAge());
   );
  );
	

public static main : () ==> ()
  main() ==
  (
  	printTests();
  	setApp();
  	printEvents();
  	printModels();
  	printDesigners();
  
  );

end TestApp